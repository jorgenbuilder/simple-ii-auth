import { Buffer } from 'buffer/';
export interface JsonArray extends Array<JsonValue> {
}
export interface JsonObject extends Record<string, JsonValue> {
}
export declare type JsonValue = boolean | string | number | JsonArray | JsonObject;
export declare type BinaryBlob = Buffer & {
    __BLOB: never;
};
export declare type DerEncodedBlob = BinaryBlob & {
    __DER_BLOB: never;
};
export declare function blobFromBuffer(b: Buffer): BinaryBlob;
export declare function blobFromUint8Array(arr: Uint8Array): BinaryBlob;
export declare function blobFromText(text: string): BinaryBlob;
export declare function blobFromUint32Array(arr: Uint32Array): BinaryBlob;
export declare function derBlobFromBlob(blob: BinaryBlob): DerEncodedBlob;
export declare function blobFromHex(hex: string): BinaryBlob;
export declare function blobToHex(blob: BinaryBlob): string;
export declare function blobToUint8Array(blob: BinaryBlob): Uint8Array;
export declare type Nonce = BinaryBlob & {
    __nonce__: void;
};
/**
 * Create a random Nonce, based on date and a random suffix.
 */
export declare function makeNonce(): Nonce;
