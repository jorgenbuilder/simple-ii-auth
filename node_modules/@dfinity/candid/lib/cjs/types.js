"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeNonce = exports.blobToUint8Array = exports.blobToHex = exports.blobFromHex = exports.derBlobFromBlob = exports.blobFromUint32Array = exports.blobFromText = exports.blobFromUint8Array = exports.blobFromBuffer = void 0;
/* eslint-disable @typescript-eslint/no-empty-interface */
/* eslint-disable jsdoc/require-jsdoc */
const buffer_1 = require("buffer/");
const leb128_1 = require("./utils/leb128");
function blobFromBuffer(b) {
    return b;
}
exports.blobFromBuffer = blobFromBuffer;
function blobFromUint8Array(arr) {
    return buffer_1.Buffer.from(arr);
}
exports.blobFromUint8Array = blobFromUint8Array;
function blobFromText(text) {
    return buffer_1.Buffer.from(text);
}
exports.blobFromText = blobFromText;
function blobFromUint32Array(arr) {
    return buffer_1.Buffer.from(arr);
}
exports.blobFromUint32Array = blobFromUint32Array;
function derBlobFromBlob(blob) {
    return blob;
}
exports.derBlobFromBlob = derBlobFromBlob;
function blobFromHex(hex) {
    return buffer_1.Buffer.from(hex, 'hex');
}
exports.blobFromHex = blobFromHex;
function blobToHex(blob) {
    return blob.toString('hex');
}
exports.blobToHex = blobToHex;
function blobToUint8Array(blob) {
    return new Uint8Array(blob.slice(0, blob.byteLength));
}
exports.blobToUint8Array = blobToUint8Array;
/**
 * Create a random Nonce, based on date and a random suffix.
 */
function makeNonce() {
    return leb128_1.lebEncode(BigInt(+Date.now()) * BigInt(100000) + BigInt(Math.floor(Math.random() * 100000)));
}
exports.makeNonce = makeNonce;
//# sourceMappingURL=types.js.map