import { KeyPair, PublicKey, SignIdentity } from '@dfinity/agent';
import { BinaryBlob, DerEncodedBlob } from '@dfinity/candid';
export declare class Ed25519PublicKey implements PublicKey {
    static from(key: PublicKey): Ed25519PublicKey;
    static fromRaw(rawKey: BinaryBlob): Ed25519PublicKey;
    static fromDer(derKey: BinaryBlob): Ed25519PublicKey;
    private static RAW_KEY_LENGTH;
    private static DER_PREFIX;
    private static derEncode;
    private static derDecode;
    private readonly rawKey;
    private readonly derKey;
    private constructor();
    toDer(): DerEncodedBlob;
    toRaw(): BinaryBlob;
}
export declare class Ed25519KeyIdentity extends SignIdentity {
    protected _privateKey: BinaryBlob;
    static generate(seed?: Uint8Array): Ed25519KeyIdentity;
    static fromParsedJson(obj: JsonnableEd25519KeyIdentity): Ed25519KeyIdentity;
    static fromJSON(json: string): Ed25519KeyIdentity;
    static fromKeyPair(publicKey: BinaryBlob, privateKey: BinaryBlob): Ed25519KeyIdentity;
    static fromSecretKey(secretKey: ArrayBuffer): Ed25519KeyIdentity;
    protected _publicKey: Ed25519PublicKey;
    protected constructor(publicKey: PublicKey, _privateKey: BinaryBlob);
    /**
     * Serialize this key to JSON.
     */
    toJSON(): JsonnableEd25519KeyIdentity;
    /**
     * Return a copy of the key pair.
     */
    getKeyPair(): KeyPair;
    /**
     * Return the public key.
     */
    getPublicKey(): PublicKey;
    /**
     * Signs a blob of data, with this identity's private key.
     * @param challenge - challenge to sign with this identity's secretKey, producing a signature
     */
    sign(challenge: BinaryBlob | ArrayBuffer): Promise<BinaryBlob>;
}
declare type PublicKeyHex = string;
declare type SecretKeyHex = string;
export declare type JsonnableEd25519KeyIdentity = [PublicKeyHex, SecretKeyHex];
export {};
