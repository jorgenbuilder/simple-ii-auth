import { PublicKey, SignIdentity } from '@dfinity/agent';
import { BinaryBlob, DerEncodedBlob } from '@dfinity/candid';
export declare class CosePublicKey implements PublicKey {
    protected _cose: BinaryBlob;
    protected _encodedKey: DerEncodedBlob;
    constructor(_cose: BinaryBlob);
    toDer(): DerEncodedBlob;
    getCose(): BinaryBlob;
}
/**
 * A SignIdentity that uses `navigator.credentials`. See https://webauthn.guide/ for
 * more information about WebAuthentication.
 */
export declare class WebAuthnIdentity extends SignIdentity {
    readonly rawId: BinaryBlob;
    /**
     * Create an identity from a JSON serialization.
     * @param json - json to parse
     */
    static fromJSON(json: string): WebAuthnIdentity;
    /**
     * Create an identity.
     * @param credentialCreationOptions an optional CredentialCreationOptions Challenge
     */
    static create(credentialCreationOptions?: CredentialCreationOptions): Promise<WebAuthnIdentity>;
    protected _publicKey: CosePublicKey;
    protected constructor(rawId: BinaryBlob, cose: BinaryBlob);
    getPublicKey(): PublicKey;
    sign(blob: BinaryBlob): Promise<BinaryBlob>;
    /**
     * Allow for JSON serialization of all information needed to reuse this identity.
     */
    toJSON(): JsonnableWebAuthnIdentitiy;
}
/**
 * ReturnType<WebAuthnIdentity.toJSON>
 * * publicKey is hex(der(publicKey))
 * * rawId is the string representation of the local WebAuthn Credential.id (iirc it is base64url encoded)
 */
export interface JsonnableWebAuthnIdentitiy {
    publicKey: string;
    rawId: string;
}
